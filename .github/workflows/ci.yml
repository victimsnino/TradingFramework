name: CI

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
  coverage:
    runs-on: ubuntu-22.04

    if: github.repository_owner == 'victimsnino'

    steps:
    - uses: actions/checkout@v4

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Install Python
      uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Conan cache
      uses: actions/cache@v4
      with:
        path: conan_cache_save.tgz
        key: conan-coverage-${{ hashFiles('conan*.[pl][yo]*') }}

    - name: Install dependencies
      run: bash < .github/scripts/conan-ci-setup.sh

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ci-coverage
        buildPreset: ci-build
        testPreset: ci-tests

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v4
      with:
        file: build/coverage/coverage.info
        token: ${{ secrets.CODECOV_TOKEN }}

  sanitize:
    strategy:
      matrix:
        sanitizer: ["tsan", "asan", "lsan", "ubsan"]

    name: Sanitize - ${{ matrix.sanitizer }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Conan cache
      uses: actions/cache@v4
      with:
        path: conan_cache_save.tgz
        key: conan-sanitize-${{ hashFiles('conan*.[pl][yo]*') }}

    - name: Install dependencies
      run: bash < .github/scripts/conan-ci-setup.sh

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ci-sanitize-${{ matrix.sanitizer }}
        buildPreset: ci-build
        testPreset: ci-sanitize

  test:
    strategy:
      matrix:
        config: [{name: ci-ubuntu-gcc,  os: ubuntu-latest},
                {name: ci-ubuntu-clang, os: ubuntu-latest},
                {name: ci-windows,      os: windows-latest},
                {name: ci-macos,        os: macos-12}]

    timeout-minutes: 120
    runs-on: ${{ matrix.config.os }}
    name: Cache deps on ${{ matrix.config.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt-get install clang-tidy-15 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-15 140

    - name: Install Python
      uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Conan cache
      uses: actions/cache@v4
      with:
        path: conan_cache_save.tgz
        key: conan-${{ matrix.os }}-${{ hashFiles('conan*.[pl][yo]*') }}

    - name: Install dependencies
      shell: bash
      run: bash < .github/scripts/conan-ci-setup.sh

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{matrix.config.name}}
        buildPreset: ci-build
        testPreset: ci-tests

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == 'victimsnino'

    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
