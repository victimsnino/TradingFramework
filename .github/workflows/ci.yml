name: CI

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  cache_deps:
    strategy:
      matrix:
        config: [
                 {name: ci-ubuntu-gcc,  os: ubuntu-latest},
                 {name: ci-ubuntu-clang, os: ubuntu-latest},
                #  {name: ci-windows,      os: windows-latest},
                #  {name: ci-macos,        os: macos-12}
                ]
        build_type: [{config: Release}, {config: Debug}]

    timeout-minutes: 120
    runs-on: ${{ matrix.config.os }}
    name: Cache deps on ${{ matrix.config.name }} for ${{ matrix.build_type.config }}

    steps:
    - uses: actions/checkout@v4
      with:
          fetch-depth: 0

    - name: get conan
      uses: turtlebrowser/get-conan@main

    - name: cache deps
      uses: actions/cache@v4
      with:
          path: |
            ~/.conan2
            /Users/runner/.conan2/
          key: deps-${{ matrix.config.name }}-${{ matrix.build_type.config }}-${{ hashFiles('**/conanfile.py') }}
          restore-keys: deps-${{ matrix.config.name }}-${{ matrix.build_type.config }}

    - name: conan detect profile
      run: |
        conan profile detect --force

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.config.name }}-tests
        configurePresetAdditionalArgs: "['-DCMAKE_BUILD_TYPE=${{ matrix.build_type.config }}', '-DCMAKE_CONFIGURATION_TYPES=${{ matrix.build_type.config }}']"

  sanitize:
    strategy:
      matrix:
        sanitizer: ["tsan", "asan", "lsan", "ubsan"]

    needs: ["cache_deps"]

    name: Sanitize - ${{ matrix.sanitizer }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: get conan
      uses: turtlebrowser/get-conan@main

    - name: cache deps
      uses: actions/cache@v4
      with:
          path: |
            ~/.conan2
            /Users/runner/.conan2/
          key: deps-ci-ubuntu-clang-Release-${{ hashFiles('**/conanfile.py') }}
          restore-keys: deps-ci-ubuntu-clang-Release

    - name: conan detect profile
      run: |
        conan profile detect --force

    - shell: bash
      run: |
          # GH-40558: reduce ASLR to avoid ASAN/LSAN crashes
          sudo sysctl -w vm.mmap_rnd_bits=28

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ci-sanitize-${{ matrix.sanitizer }}
        buildPreset: ci-build
        testPreset: ci-sanitize
  test:
    strategy:
      matrix:
        config: [
                  {name: ci-ubuntu-gcc,  os: ubuntu-latest},
                  {name: ci-ubuntu-clang, os: ubuntu-latest},
                  # {name: ci-windows,      os: windows-latest},
                  # {name: ci-macos,        os: macos-12}
                ]
        build_type: [{config: Release, test_preset: ci-tests}, {config: Debug, test_preset: ci-tests-debug}]

    needs: ["cache_deps"]

    timeout-minutes: 120
    runs-on: ${{ matrix.config.os }}
    name: Tests - ${{ matrix.config.name }} - ${{ matrix.build_type.config }}

    steps:
    - uses: actions/checkout@v4

    - name: Install static analyzers
      run: >-
        sudo apt-get install clang-tidy-15 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-15 140

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.config.name }}-${{ matrix.build_type.config }}

    - name: Cmake version
      run: cmake --version

    - name: get conan
      uses: turtlebrowser/get-conan@main

    - name: cache deps
      uses: actions/cache@v4
      with:
          path: |
            ~/.conan2
            /Users/runner/.conan2/
          key: deps-${{ matrix.config.name }}-${{ matrix.build_type.config }}-${{ hashFiles('**/conanfile.py') }}
          restore-keys: deps-${{ matrix.config.name }}-${{ matrix.build_type.config }}

    - name: conan detect profile
      run: |
        conan profile detect --force

    - name: Setup MultiToolTask
      if: matrix.config.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.config.name }}-tests
        configurePresetAdditionalArgs: "['-DCMAKE_BUILD_TYPE=${{ matrix.build_type.config }}', '-DCMAKE_CONFIGURATION_TYPES=${{ matrix.build_type.config }}']"
        buildPreset: ci-build
        buildPresetAdditionalArgs: "['--config ${{ matrix.build_type.config }}']"
        testPreset: ${{matrix.build_type.test_preset}}

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'victimsnino'

    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
