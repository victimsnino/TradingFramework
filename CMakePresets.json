{
  "version": 2,
  "cmakeMinimumRequired": {
    "major": 3,
    "minor": 14,
    "patch": 0
  },
  "configurePresets": [
    {
      "name": "cmake-pedantic",
      "hidden": true,
      "warnings": {
        "dev": true,
        "deprecated": true,
        "uninitialized": true,
        "unusedCli": true,
        "systemVars": false
      },
      "errors": {
        "dev": true,
        "deprecated": true
      }
    },
    {
      "name": "dev-mode",
      "hidden": true,
      "inherits": "cmake-pedantic",
      "cacheVariables": {
        "DEVELOPER_MODE": "ON",
        "CMAKE_EXPORT_COMPILE_COMMANDS" : "ON"
      }
    },
    {
      "name": "conan",
      "hidden": true,
      "cacheVariables": {
          "CMAKE_PROJECT_TOP_LEVEL_INCLUDES": "cmake/conan_provider.cmake",
          "CONAN_ARGS": "",
          "CONAN_INSTALL_ARGS": "--build=missing;-s:a compiler.cppstd=20;-c tools.system.package_manager:mode=install;-c tools.system.package_manager:sudo=True"
        }
    },
    {
      "name": "cppcheck",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_CPPCHECK": "cppcheck;--inline-suppr;--std=c++20;--enable=all;--check-config;--suppress=missingIncludeSystem"
      }
    },
    {
      "name": "clang-tidy",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_CLANG_TIDY": "clang-tidy;--header-filter=^${sourceDir}/"
      }
    },
    {
      "name": "flags-gcc-clang",
      "description": "These flags are supported by both GCC and Clang",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -D_GLIBCXX_ASSERTIONS=1 -fstack-protector-strong -fcf-protection=full -fstack-clash-protection -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wcast-qual -Wformat=2 -Wundef -Werror=float-equal -Wshadow -Wcast-align -Wunused -Wnull-dereference -Wdouble-promotion -Wimplicit-fallthrough -Wextra-semi -Woverloaded-virtual -Wnon-virtual-dtor -Wold-style-cast",
        "CMAKE_EXE_LINKER_FLAGS": "-Wl,--allow-shlib-undefined,--as-needed,-z,noexecstack,-z,relro,-z,now,-z,nodlopen",
        "CMAKE_SHARED_LINKER_FLAGS": "-Wl,--allow-shlib-undefined,--as-needed,-z,noexecstack,-z,relro,-z,now,-z,nodlopen"
      }
    },
    {
      "name": "flags-appleclang",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-fstack-protector-strong -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wcast-qual -Wformat=2 -Wundef -Werror=float-equal -Wshadow -Wcast-align -Wunused -Wnull-dereference -Wdouble-promotion -Wimplicit-fallthrough -Wextra-semi -Woverloaded-virtual -Wnon-virtual-dtor -Wold-style-cast"
      }
    },
    {
      "name": "flags-msvc",
      "description": "Note that all the flags after /W4 are required for MSVC to conform to the language standard",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "/sdl /guard:cf /utf-8 /diagnostics:caret /w14165 /w44242 /w44254 /w44263 /w34265 /w34287 /w44296 /w44365 /w44388 /w44464 /w14545 /w14546 /w14547 /w14549 /w14555 /w34619 /w34640 /w24826 /w14905 /w14906 /w14928 /w45038 /W4 /permissive- /volatile:iso /Zc:inline /Zc:preprocessor /Zc:enumTypes /Zc:lambda /Zc:__cplusplus /Zc:externConstexpr /Zc:throwingNew /EHsc",
        "CMAKE_EXE_LINKER_FLAGS": "/machine:x64 /guard:cf"
      }
    },
    {
      "name": "ci-linux",
      "inherits": ["flags-gcc-clang"],
      "generator": "Unix Makefiles",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Release"
      }
    },
    {
      "name": "ci-darwin",
      "generator": "Unix Makefiles",
      "inherits": ["flags-appleclang"],
      "hidden": true
    },
    {
      "name": "ci-win64",
      "generator": "Visual Studio 17 2022",
      "inherits": ["flags-msvc"],
      "architecture": "x64",
      "hidden": true
    },
    {
      "name": "coverage-linux-gcc",
      "binaryDir": "${sourceDir}/build/coverage",
      "inherits": "ci-linux",
      "hidden": true,
      "cacheVariables": {
        "ENABLE_COVERAGE": "ON",
        "CMAKE_CXX_FLAGS": "-O0 -g --coverage -fkeep-inline-functions -fkeep-static-functions -fprofile-arcs -ftest-coverage -fno-inline -fno-omit-frame-pointer -fno-optimize-sibling-calls",
        "CMAKE_EXE_LINKER_FLAGS": "--coverage",
        "CMAKE_SHARED_LINKER_FLAGS": "--coverage"
      }
    },

    {
      "name": "ci-build",
      "binaryDir": "${sourceDir}/build",
      "hidden": true,
      "inherits":["conan"]
    },
    {
      "name" : "build-tests",
      "hidden": true,
      "cacheVariables": {
        "BUILD_TESTING" : "ON"
      }
    },
    {
      "name": "ci-gcc",
      "hidden": true,
      "environment": {
        "CC" : "gcc-10",
        "CXX": "g++-10"
      },
      "cacheVariables": {
        "RPP_GCOV_TOOL" : "/usr/bin/gcov-10"
      }
    },
    {
      "name": "ci-clang",
      "hidden": true,
      "environment": {
        "CC" : "clang-14",
        "CXX": "clang++-14"
      }
    },



    {
      "name": "ci-coverage",
      "inherits": ["coverage-linux-gcc", "dev-mode"],
      "cacheVariables": {
        "COVERAGE_HTML_COMMAND": ""
      }
    },
    {
      "name": "ci-sanitize-tsan",
      "inherits": ["ci-build", "build-tests", "ci-linux", "ci-clang"],
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-fsanitize=thread -g -O1"
      }
    },
    {
      "name": "ci-sanitize-asan",
      "inherits": ["ci-build", "build-tests", "ci-linux", "ci-clang"],
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-fsanitize=address -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -fno-omit-frame-pointer -g -O1"
      }
    },
    {
      "name": "ci-sanitize-lsan",
      "inherits": ["ci-build", "build-tests", "ci-linux", "ci-clang"],
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-fsanitize=leak -fno-omit-frame-pointer -g -O1"
      }
    },
    {
      "name": "ci-sanitize-msan",
      "inherits": ["ci-build", "build-tests", "ci-linux", "ci-clang"],
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-fsanitize=memory -fno-optimize-sibling-calls -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -g -O2"
      }
    },
    {
      "name": "ci-sanitize-ubsan",
      "inherits": ["ci-build", "build-tests", "ci-linux", "ci-clang"],
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-fsanitize=undefined"
      }
    },

    {
      "name": "ci-macos",
      "inherits": ["ci-build", "ci-darwin", "dev-mode"]
    },
    {
      "name": "ci-ubuntu-clang",
      "inherits": ["ci-build", "ci-linux", "clang-tidy", "cppcheck", "dev-mode", "ci-clang"]
    },
    {
      "name": "ci-ubuntu-clang-no-checks",
      "inherits": ["ci-build", "ci-linux","dev-mode", "ci-clang"]
    },
    {
      "name": "ci-ubuntu-gcc",
      "inherits": ["ci-build", "ci-linux", "clang-tidy", "cppcheck", "dev-mode", "ci-gcc"]
    },
    {
      "name": "ci-windows",
      "inherits": ["ci-build", "ci-win64", "dev-mode"]
    },

    {
      "name": "ci-macos-tests",
      "inherits": ["ci-macos", "build-tests"]
    },
    {
      "name": "ci-ubuntu-clang-tests",
      "inherits": ["ci-ubuntu-clang", "build-tests"]
    },
    {
      "name": "ci-ubuntu-clang-tests-no-checks",
      "inherits": ["ci-ubuntu-clang-no-checks", "build-tests"]
    },
    {
      "name": "ci-ubuntu-gcc-tests",
      "inherits": ["ci-ubuntu-gcc", "build-tests"]
    },
    {
      "name": "ci-windows-tests",
      "inherits": ["ci-windows", "build-tests"]
    }
  ],
  "buildPresets" :[
    {
      "name" : "ci-build",
      "jobs" : 2,
      "configurePreset" : "ci-build"
    }
  ],
  "testPresets": [
    {
      "name": "ci-tests-base",
      "hidden": true,
      "configurePreset" : "ci-build",
      "environment": {
        "QT_QPA_PLATFORM": "offscreen"
      },
      "output": {
        "outputOnFailure": true
      },
      "execution": {
        "timeout": 60
      }
    },
    {
      "name": "ci-tests",
      "inherits": ["ci-tests-base"],
      "configuration": "Release"
    },
    {
      "name": "ci-tests-debug",
      "inherits": ["ci-tests-base"],
      "configuration": "Debug"
    },
    {
      "name": "ci-sanitize",
      "inherits" : ["ci-tests"],
      "environment": {
        "ASAN_OPTIONS": "strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_leaks=1:halt_on_error=1",
        "UBSAN_OPTIONS": "print_stacktrace=1:halt_on_error=1",
        "TSAN_OPTIONS": "second_deadlock_stack=1"
      }
    }
  ]
}
